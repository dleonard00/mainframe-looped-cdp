{"version":3,"sources":["images/loop.svg","components/Form/index.js","components/ListOfValues/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CustomForm","validateEthValue","rule","value","callback","_this$props$ethValue","_this","props","ethValue","minEthValue","min","maxEthValue","max","concat","validatePercentValue","_this$props$percentVa","percentValue","minPercentValue","maxPercentValue","_this$props","this","getFieldDecorator","form","initialEthValue","initial","initialPercentValue","changeEthValue","changePercentValue","react_default","a","createElement","className","es_form","col","span","Item","label","rules","validator","initialValue","input_number","formatter","parser","replace","onChange","size","step","Component","Form","create","name","Text","Typography","components_ListOfValues","_ref","data","map","item","index","row","key","divider","type","justify","text","_default","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","initialized","account","ethBalance","ethPrice","collateral","debt","liquidationPrice","leverageContract","sending","returnValue","collateralizationRatio","changeValue","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","setState","defineProperty","Number","calculateValues","stop","_x","apply","arguments","leverage","_callee2","_this$state","_context2","sendingStart","methods","riskNewCDP","toWei","send","from","sendingEnd","message","success","t0","error","sdk","MainframeSDK","web3","Web3","ethereum","web3Provider","formRef","React","createRef","utils","fromWei","String","on","_this2","fetchState","initContracts","initValues","factoryAddress","addresses","daiAddress","leverageAddress","factoryContract","eth","Contract","factoryABI","getExchange","exchangeAddress","exchangeContract","exchangeABI","leverageABI","getTokenToEthOutputPrice","getAccounts","accounts","length","getBalance","weiBalance","contractEthBalance","ratio","Math","pow","toFixed","_this$state2","Infinity","currentValue","i","round","_this$state3","isDanger","labelColor","labelText","disabled","current","errors","getFieldsError","align","Card_Text","components_Form","wrappedComponentRef","tag","color","es_alert","showIcon","es_button","onClick","block","loading","skeleton","active","Header","Layout","Footer","Content","App","layout","src","loopImage","alt","App_Text","components_Card_default","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98abcc9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loop.f3186cdd.svg\";","import React, { Component } from 'react';\nimport {\n  Col,\n  InputNumber,\n  Form,\n} from 'antd';\n\nimport './index.scss';\n\nclass CustomForm extends Component {\n  validateEthValue = (rule, value, callback) => {\n    const {\n      min: minEthValue,\n      max: maxEthValue,\n    } = this.props.ethValue;\n    if (value && value >= minEthValue && value <= maxEthValue) {\n      callback();\n    } else if (value && value > maxEthValue) {\n      callback(`The Looper has a limit of ${maxEthValue} ETH per transaction.`);\n    } else {\n      callback(`The minimum required value is ${minEthValue} ETH`);\n    }\n  }\n  validatePercentValue = (rule, value, callback) => {\n    const { \n      min: minPercentValue,\n      max: maxPercentValue,\n    } = this.props.percentValue;\n    if (value && value >= minPercentValue && value <= maxPercentValue) {\n      callback();\n    } else {\n      callback(`Rate must be between ${minPercentValue}% and ${maxPercentValue}%`);\n    }\n  }\n  render() {\n    const {\n      form: {\n        getFieldDecorator,\n      },\n      ethValue: {\n        initial: initialEthValue,\n      },\n      percentValue: {\n        initial: initialPercentValue,\n      },\n      changeEthValue,\n      changePercentValue,\n    } = this.props;\n    return (\n      <div className=\"form-container\">\n        <Form>\n          <Col span={11}>\n            <Form.Item label=\"ETH to lock\">\n              {getFieldDecorator('ethValue', {\n                rules: [{\n                  validator: this.validateEthValue,\n                }],\n                initialValue: initialEthValue,\n              })(\n                <InputNumber\n                  formatter={value => `⧫ ${value}`}\n                  parser={value => value.replace('⧫', '')} \n                  onChange={changeEthValue}\n                  className=\"input\"\n                  size=\"large\"\n                  step={0.01}\n                  min={0}\n                />\n              )}\n            </Form.Item>\n          </Col>\n          <Col span={2} />\n          <Col span={11}>\n            <Form.Item label=\"Rehypothecation rate\">\n              {getFieldDecorator('percentValue', {\n                rules: [{\n                  validator: this.validatePercentValue,\n                }],\n                initialValue: initialPercentValue,\n              })(\n                <InputNumber\n                  formatter={value => `${value} %`}\n                  parser={value => value.replace('%', '')}\n                  onChange={changePercentValue}\n                  className=\"input\"\n                  size=\"large\"\n                  step={5}\n                  min={0}\n                  max={100}\n                />\n              )}\n            </Form.Item>\n          </Col>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Form.create({ name: 'register' })(CustomForm);\n","import React from 'react';\nimport {\n  Typography,\n  Row,\n  Divider,\n} from 'antd';\n\nimport './index.scss';\n\nconst { Text } = Typography;\n\nexport default ({ data }) =>\n  data.map((item, index) => (\n    <Row key={index}>\n      {index > 0 && <Divider className=\"divider\" />}\n      <Row type=\"flex\" justify=\"space-between\">\n        <Text>{item.text}</Text>\n        <Text>{item.value}</Text>\n      </Row>\n    </Row>\n  ));\n","import React, { Component } from 'react';\nimport MainframeSDK from '@mainframe/sdk';\nimport Web3 from 'web3';\n\nimport {\n  Button,\n  Typography,\n  Col,\n  Tag,\n  message,\n  Skeleton,\n  Alert,\n} from 'antd';\n\nimport Form from '../Form';\nimport ListOfValues from '../ListOfValues';\n\nimport factoryABI from '../../contracts/Factory.json';\nimport exchangeABI from '../../contracts/Exchange.json';\nimport leverageABI from '../../contracts/Leverage.json';\nimport addresses from '../../addresses.json';\n\nimport './index.scss';\n\nconst { Text } = Typography;\n\n\nexport default class extends Component {\n  state = {\n    initialized: false,\n    account: '',\n    ethBalance: 0,\n    ethPrice: 0,\n    initialEthValue: 0.1,\n    ethValue: 0,\n    minEthValue: 0.01,\n    maxEthValue: 0,\n    initialPercentValue: 50,\n    percentValue: 0,\n    minPercentValue: 10,\n    maxPercentValue: 60,\n    collateral: 0,\n    debt: 0,\n    liquidationPrice: 0,\n    leverageContract: null,\n    sending: false,\n    returnValue: 0,\n    collateralizationRatio: 0,\n  }\n\n  constructor() {\n    super();\n    this.sdk = new MainframeSDK();\n    this.web3 = new Web3(this.sdk.ethereum.web3Provider);\n    this.formRef = React.createRef();\n  }\n\n  fromWei(value) {\n    return this.web3.utils.fromWei(String(value));\n  }\n\n  toWei(value) {\n    return this.web3.utils.toWei(String(value));\n  }\n\n  async componentDidMount() {\n    if (this.sdk.ethereum.web3Provider !== null) {\n      this.sdk.ethereum.on('accountsChanged', () => {\n        this.fetchState();\n      })\n      this.sdk.ethereum.on('networkChanged', () => {\n        this.fetchState();\n      })\n      await this.initContracts();\n      await this.initValues();\n      this.setState({ initialized: true });\n    }\n    this.fetchState();\n  }\n\n  async initContracts() {\n    const { factoryAddress, daiAddress, leverageAddress } = addresses;\n    const factoryContract = new this.web3.eth.Contract(\n      factoryABI,\n      factoryAddress,\n    );\n    const exchangeAddress = await factoryContract.methods\n      .getExchange(daiAddress)\n      .call();\n    const exchangeContract = new this.web3.eth.Contract(\n      exchangeABI,\n      exchangeAddress,\n    );\n    const leverageContract = new this.web3.eth.Contract(\n      leverageABI,\n      leverageAddress,\n    );\n\n    const ethPrice = await exchangeContract.methods\n      .getTokenToEthOutputPrice(this.toWei(1))\n      .call();\n\n    this.setState({\n      ethPrice: Number(this.fromWei(ethPrice)),\n      leverageContract,\n    });\n  }\n\n  async fetchState() {\n    const accounts = await this.web3.eth.getAccounts();\n    if (accounts.length) {\n      const account = accounts[0];\n      const weiBalance = await this.web3.eth.getBalance(account);\n      const ethBalance = this.fromWei(weiBalance);\n      this.setState({\n        account,\n        ethBalance,\n      });\n    }\n  }\n\n  async initValues() {\n    const { leverageAddress } = addresses;\n\n    const contractEthBalance =  this.fromWei(await this.web3.eth.getBalance(leverageAddress));\n    const ratio = this.state.maxPercentValue / 100;\n    const maxEthValue = Number(((contractEthBalance * 0.9) / (ratio + ratio**2 + ratio**3)).toFixed(2));\n\n    let initialEthValue = this.state.initialEthValue;\n    if (initialEthValue > maxEthValue) {\n      initialEthValue = maxEthValue;\n    }\n    const ethValue = initialEthValue;\n    const percentValue = this.state.initialPercentValue;\n\n    await this.setState({\n      initialEthValue,\n      ethValue,\n      maxEthValue,\n      percentValue,\n    });\n\n    this.calculateValues();\n  }\n\n  calculateValues() {\n    const { ethPrice, percentValue, ethValue } = this.state;\n\n    let collateral = 0;\n    let debt = 0;\n    let liquidationPrice = 0;\n    let returnValue = 0;\n    let collateralizationRatio = Infinity;\n\n    if (percentValue > 0 && ethValue > 0) {\n      const ratio = percentValue / 100;\n      let currentValue = ethValue;\n      collateral = currentValue;\n      for (let i = 0; i < 3; i++) {\n        currentValue *= ratio;\n        collateral += currentValue;\n      }\n      \n      currentValue = ethPrice;\n      for (let i = 0; i < 4; i++) {\n        currentValue *= ratio;\n        debt += currentValue;\n      }\n      debt *= ethValue;\n\n      returnValue = debt - ((collateral - ethValue) * ethPrice);\n      collateralizationRatio = Math.round(100 / (percentValue / 100));\n      liquidationPrice = ((debt / collateral / 2) * 3) || 0;\n    }\n    \n    this.setState({\n      collateral,\n      debt,\n      liquidationPrice,\n      returnValue,\n      collateralizationRatio,\n    });\n  }\n\n  changeValue = name => async value => {\n    if (typeof value !== 'number') return;\n    await this.setState({ [name]: Number(value) });\n    this.calculateValues();\n  }\n\n  sendingStart() {\n    this.setState({ sending: true });\n  }\n\n  sendingEnd() {\n    this.setState({ sending: false });\n  }\n\n  leverage = async () => {\n    const {\n      collateral,\n      debt,\n      leverageContract,\n      account,\n      ethValue,\n    } = this.state;\n    try {\n      this.sendingStart();\n      await leverageContract.methods.riskNewCDP(\n        this.toWei(collateral),\n        this.toWei(debt),\n        true,\n      ).send({ value: this.toWei(ethValue), from: account });\n      this.sendingEnd();\n      message.success('Transaction sent');\n    } catch (error) {\n      this.sendingEnd();\n      message.error(error.message);\n    }\n  }\n\n  render() {\n    const {\n      ethPrice,\n      collateral,\n      debt,\n      liquidationPrice,\n      returnValue,\n      collateralizationRatio,\n      initialEthValue,\n      minEthValue,\n      maxEthValue,\n      initialPercentValue,\n      minPercentValue,\n      maxPercentValue,\n    } = this.state;\n    const percentValue = this.state.percentValue;\n\n    const isDanger = percentValue > 50;\n    const labelColor = isDanger ? 'red' : 'green';\n    const labelText = isDanger ? 'danger' : 'safe';\n\n    let disabled = false;\n    if (this.formRef.current) {\n      const errors = this.formRef.current.props.form.getFieldsError(['ethValue', 'percentValue']);\n      disabled = errors.ethValue || errors.percentValue;\n    }\n\n    return (\n      <div className=\"card-container\">\n        {!this.state.initialized ? (\n          <div>\n            <Skeleton active />\n            <Skeleton active />\n            <Skeleton active />\n          </div>\n        ) : (\n          <div>\n            <Col align=\"center\">\n              <Text className=\"title\">\n                Leveraged Collateralized\n              </Text>\n              <br />\n              <Text className=\"title\">\n                Debt Position\n              </Text>\n            </Col>\n            <Form\n              wrappedComponentRef={this.formRef}\n              changeEthValue={this.changeValue('ethValue')}\n              changePercentValue={this.changeValue('percentValue')}\n              ethValue={{\n                initial: initialEthValue,\n                min: minEthValue,\n                max: maxEthValue,\n              }}\n              percentValue={{\n                initial: initialPercentValue,\n                min: minPercentValue,\n                max: maxPercentValue,\n              }}\n            />\n            <ListOfValues\n              data={[\n                {\n                  text: 'Current ETH price',\n                  value: `$${ethPrice.toFixed(2)}`,\n                },\n                {\n                  text: 'Expected Collateral (ETH)',\n                  value: collateral.toFixed(3),\n                },\n                {\n                  text: 'Expected Debt (DAI)',\n                  value: debt.toFixed(2),\n                },\n                {\n                  text: 'Expected Change (DAI)',\n                  value: returnValue.toFixed(2),\n                },\n                {\n                  text: 'Expected Liquidation Price',\n                  value: `$${liquidationPrice.toFixed(2)}`,\n                },\n                {\n                  text: 'Expected Collateralization Ratio',\n                  value: collateralizationRatio + (collateralizationRatio !== Infinity && '%'),\n                },\n                {\n                  text: 'Expected Status',\n                  value: <Tag color={labelColor} className=\"tag\">{labelText}</Tag>,\n                },\n              ]}\n            />\n            <Alert\n              message=\"The final values may slightly differ from this calculator due to exchange rate volatility and slippage.\"\n              type=\"info\"\n              showIcon\n              className=\"alert\"\n            />\n            <Button\n              className=\"button\"\n              type=\"primary\"\n              disabled={disabled}\n              onClick={this.leverage}\n              block\n              loading={this.state.sending}\n            >Loop it!</Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Typography,\n  Layout,\n  Row,\n} from 'antd';\n\nimport Card from './components/Card';\n\nimport loopImage from './images/loop.svg';\n\nimport './App.scss';\n\nconst { Text } = Typography;\nconst { Header, Footer, Content } = Layout;\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Layout className=\"page-layout\">\n        <Header>\n          <Row type=\"flex\" className=\"header-row\">\n            <img src={loopImage} alt=\"\" className=\"logo\" />\n            <Text className=\"logo-text\">The Looper</Text>\n          </Row>\n        </Header>\n        <Content>\n          <Row>\n            <Card />\n          </Row>\n        </Content>\n        <Footer>\n          <Row type=\"flex\" justify=\"center\">© 2019 Nonsense Technologies</Row>\n        </Footer>\n      </Layout>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}